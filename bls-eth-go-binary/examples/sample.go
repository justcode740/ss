package main

import (
	"bufio"
	"encoding/hex"
	"encoding/json"
	"fmt"
	"io/ioutil"

	// "log"
	"sync"

	// "io/ioutil"
	"os"
	"strconv"
	"strings"
	"time"

	"github.com/360EntSecGroup-Skylar/excelize/v2"
	"github.com/herumi/bls-eth-go-binary/bls"
	"github.com/spf13/cobra"
)

var allValidators map[int]string
var mp  map[string]bool


func sample1() {
	fmt.Printf("sample1\n")
	var sec bls.SecretKey
	sec.SetByCSPRNG()
	msg := []byte("abc")
	pub := sec.GetPublicKey()
	fmt.Println(pub)
	sig := sec.SignByte(msg)
	fmt.Println(sig)
	fmt.Printf("verify=%v\n", sig.VerifyByte(pub, msg))
}

func sample2() {
	fmt.Printf("sample2\n")
	var sec bls.SecretKey
	sec.SetByCSPRNG()
	fmt.Printf("sec:%s\n", sec.SerializeToHexStr())
	pub := sec.GetPublicKey()
	fmt.Printf("1.pub:%s\n", pub.SerializeToHexStr())
	fmt.Printf("1.pub x=%x\n", pub)
	var P *bls.G1 = bls.CastFromPublicKey(pub)
	bls.G1Normalize(P, P)
	fmt.Printf("2.pub:%s\n", pub.SerializeToHexStr())
	fmt.Printf("2.pub x=%x\n", pub)
	fmt.Printf("P.X=%x\n", P.X.Serialize())
	fmt.Printf("P.Y=%x\n", P.Y.Serialize())
	fmt.Printf("P.Z=%x\n", P.Z.Serialize())
}

func sample3() {
	fmt.Printf("sample3\n")
	var sec bls.SecretKey
	b := make([]byte, 64)
	for i := 0; i < len(b); i++ {
		b[i] = 0xff
	}
	err := sec.SetLittleEndianMod(b)
	if err != nil {
		fmt.Printf("err")
		return
	}
	fmt.Printf("sec=%x\n", sec.Serialize())
}

func sample4() {
	fmt.Printf("sample4\n")
	var sec bls.SecretKey
	secByte, _ := hex.DecodeString("4aac41b5cb665b93e031faa751944b1f14d77cb17322403cba8df1d6e4541a4d")
	sec.Deserialize(secByte)
	fmt.Println(sec)
	msg := []byte("message to be signed.")
	fmt.Printf("sec:%x\n", sec.Serialize())
	pub := sec.GetPublicKey()
	fmt.Printf("pub:%x\n", pub.Serialize())
	sig := sec.SignByte(msg)
	fmt.Printf("sig:%x\n", sig.Serialize())
}

// this function return true if sigToVerify is aggregated signature generated by hexstring pk each independently sign the same underlying msg, otherwise return false
func aggregateVerify(msg []byte, rawPks []string, sigToVerify string) bool {
	sig := bls.Sign{}
	sig.DeserializeHexStr(sigToVerify)
	
	var pks []bls.PublicKey
	for _, rawPk := range rawPks {
		pk := bls.PublicKey{}
		pk.DeserializeHexStr(rawPk)
		pks = append(pks, pk)
	}

	return sig.FastAggregateVerify(pks, msg)
}


func verfiyAttestationByValidatorAndBlock(validator int, blockSlot int) ([]bool, []string) {
	block := readBlockInfo(blockInfoDataFolder, uint(blockSlot))
	res := []bool{}
	sigs := []string{}
	for _, attestation := range (block.Data) {
		if contains(attestation.Validators, validator) {
			// get data root
			signing_root := getSigningRoot2(attestation.Beaconblockroot[2:], attestation.Signature[2:], uint(attestation.Slot), uint(attestation.Committeeindex), uint(attestation.SourceEpoch), uint(attestation.TargetEpoch), attestation.SourceRoot[2:], attestation.TargetRoot[2:])
			// get sig to verify
			sig := attestation.Signature[2:]
			var pks []string
			for _, idx := range attestation.Validators {
				pks = append(pks, allValidators[idx][2:])
			}
			r := aggregateVerify(signing_root[:], pks, sig)
			res = append(res, r)
			sigs = append(sigs, attestation.Signature)
		}
	}
	
	return res, sigs
}

func verifyAttestation(beaconBlockRoot string, sig string, slot uint, committeeIdx uint, sourceEpoch uint, targetEpoch uint, sourceRoot string, targetRoot string, validators []int) bool {
	// get data root
	signing_root := getSigningRoot2(beaconBlockRoot[2:], sig[2:], slot, committeeIdx, sourceEpoch, targetEpoch, sourceRoot[2:],  targetRoot[2:])
	var pks []string
	for _, idx := range validators {
		pks = append(pks, allValidators[idx][2:])
	}
	r := aggregateVerify(signing_root[:], pks, sig[2:])
	return r
}

func verifyAllAttestationInBlock(blockSlot int) []bool {
	folderPath := "test/"
	if !blockInfoExist(folderPath, uint(blockSlot)) {
		batchWriteBlockInfo(folderPath, []uint{uint(blockSlot)})
	}
	block := readBlockInfo(folderPath, uint(blockSlot))
	res := []bool{}
	for _, attestation := range (block.Data) {
		// key := strconv.Itoa(attestation.Slot) + ":" + strconv.Itoa(attestation.Committeeindex)

		// get data root
		signing_root := getSigningRoot2(attestation.Beaconblockroot[2:], attestation.Signature[2:], uint(attestation.Slot), uint(attestation.Committeeindex), uint(attestation.SourceEpoch), uint(attestation.TargetEpoch), attestation.SourceRoot[2:], attestation.TargetRoot[2:])
		// get sig to verify
		sig := attestation.Signature[2:]
		var pks []string
		for _, idx := range attestation.Validators {
			pks = append(pks, allValidators[idx][2:])
		}
		r := aggregateVerify(signing_root[:], pks, sig)
		res = append(res, r)
	}
	
	return res
}

func searchSinglePubKey(validator int, blockSlot int) (int, string) {
	block := readBlockInfo(blockInfoDataFolder, uint(blockSlot))
	var idxRes int
	var pkRes string
	for _, attestation := range (block.Data) {
		if contains(attestation.Validators, validator) {
			// get data root
			signing_root := getSigningRoot2(attestation.Beaconblockroot[2:], attestation.Signature[2:], uint(attestation.Slot), uint(attestation.Committeeindex), uint(attestation.SourceEpoch), uint(attestation.TargetEpoch), attestation.SourceRoot[2:], attestation.TargetRoot[2:])
			// get sig to verify
			sig := attestation.Signature[2:]
			var wg sync.WaitGroup
			wg.Add(1)
			found:=false
			for idx, pubkey := range allValidators{
				go func(idx int, pubkey string) {
					if found {return}
					var pks []string
					pks = append(pks, pubkey[2:])
					r := aggregateVerify(signing_root[:], pks, sig)
					if r {
						wg.Done()
						idxRes = idx
						pkRes = pubkey
						fmt.Println(sig, idx, pubkey)
						found = true
					}
				}(idx, pubkey)
				

			}
			wg.Wait()
			break	
		}
	}
	return idxRes, pkRes

	
}

func checkExcel() {
	f, err := excelize.OpenFile("./data/unslashed_double_votes.xlsx")
	if err!=nil {
		fmt.Println(err)
	}
	eth2Client := newEth2Client()
	for i := 2; i < 200; i++ {
		idx := strconv.Itoa(i)
		validatorIdx, _ := f.GetCellValue("unslashed_double_votes", "B"+idx)
		validator, _ := strconv.Atoi(validatorIdx)
		blocksStr, _ := f.GetCellValue("unslashed_double_votes", "C"+idx)
		var blocks []int
		err := json.Unmarshal([]byte(blocksStr), &blocks)
		if err != nil {
			fmt.Println(err)
		}
		blocks = removeDuplicateInt(blocks)
		for _, blockSlot := range blocks {
			_, pks, sig, err := eth2Client.GetAttestationsForBlock(uint(blockSlot), validator)
			if err != nil {
				fmt.Print(err)
			}else{
				fmt.Print(strconv.FormatBool(aggregateVerify(nil, pks, sig)) + "    ")
			}
			time.Sleep(1 * time.Second)
			
		}
		fmt.Println()
	}
}
var c map[string]bool
func checkDoubleVoteWithLocalData(){
	f, err := excelize.OpenFile("./data/unslashed_double_votes.xlsx")
	if err!=nil {
		fmt.Println(err)
	}
	fmt.Println("dd")

	defer f.Close()
	// 405
	for i := 2; i < 406; i++ {
		idx := strconv.Itoa(i)
		validatorIdx, _ := f.GetCellValue("unslashed_double_votes", "B"+idx)
		validator, _ := strconv.Atoi(validatorIdx)
		blocksStr, _ := f.GetCellValue("unslashed_double_votes", "C"+idx)
		var blocks []int
		err := json.Unmarshal([]byte(blocksStr), &blocks)
		if err != nil {
			fmt.Println(err)
		}
		blocks = removeDuplicateInt(blocks)
		// c, t, f:=0,0,0
		
		for _, blockSlot := range blocks {
			res, sigs := verfiyAttestationByValidatorAndBlock(validator, blockSlot)
			for i:=0; i <len(res) ; i++{
				if !res[i] {
					c[sigs[i]] = true
				}
				fmt.Print(strconv.FormatBool(res[i])+"  ")
			}
			
		}
		fmt.Println()
	}
	fmt.Println(len(c))
	// file, _ := json.MarshalIndent(mp, "", " ")
	// _ = ioutil.WriteFile("slot:committeeIdx.json", file, 0644)
	
}

// func key(committeeIdx int, slot int) string {
// 	strconv.FormatInt(slot, 10) + ":" + strconv
// }

func checkSurroundVoteWithLocalData(){
	f, err := os.Open("./data/surround_vote")
	if err!=nil {
		fmt.Println(err)
	}

	defer f.Close()

    scanner := bufio.NewScanner(f)
    // optionally, resize scanner's capacity for lines over 64K, see next example
	first := true
    for scanner.Scan() {
		if first {
			first = false
			continue
		}
		vals := strings.Fields(scanner.Text())
		idx, _ := strconv.Atoi(vals[0])
		blockslot, _ := strconv.Atoi(vals[1])
		res, sigs := verfiyAttestationByValidatorAndBlock(idx, blockslot)
        for i:=0; i <len(res) ; i++{
			if !res[i] {
				c[sigs[i]] = true
			}
			fmt.Print(strconv.FormatBool(res[i])+"  ")
		}
		fmt.Println()
    }

    if err := scanner.Err(); err != nil {
        panic(err)
    }
	fmt.Println(len(c))
}

func checkalgo(){
	f, err := excelize.OpenFile("./data/unslashed_double_votes.xlsx")
	if err!=nil {
		fmt.Println(err)
	}
	all_validators := getValidatorMap()
	both_true := 0
	both_false := 0
	true_false := 0
	count := 0

	// 405
	for i := 2; i < 406; i++ {
		idx := strconv.Itoa(i)
		validatorIdx, _ := f.GetCellValue("unslashed_double_votes", "B"+idx)
		validator, _ := strconv.Atoi(validatorIdx)
		blocksStr, _ := f.GetCellValue("unslashed_double_votes", "C"+idx)
		var blocks []int
		err := json.Unmarshal([]byte(blocksStr), &blocks)
		if err != nil {
			fmt.Println(err)
		}
		blocks = removeDuplicateInt(blocks)
		c, t, f:=0,0,0
		
		for _, blockSlot := range blocks {
			res := readBlockInfo(blockInfoDataFolder, uint(blockSlot))
			for _, attestation := range (res.Data) {
				if !contains(attestation.Validators, validator) {
					// get data root
					// msg := attestation.Beaconblockroot
					// get pubkeys
					var pks []string
					for _, idx := range attestation.Validators {
						pks = append(pks, all_validators[idx][2:])
					}
					// get sig to verify
					sig := attestation.Signature
					check:=aggregateVerify(nil, pks, sig)
					// fmt.Print(strconv.FormatBool(check)+"  ")
					if check{
						t++
					}else{
						f++
					}
					c++
					
				}
			}
		}
		if c==2 {
			count++
			if t==0 {
				both_false++
			}else if t==2{
				both_true++
			}else{
				true_false++
			}
		}
		fmt.Println()
	}
	fmt.Println(both_true, both_false, true_false, count)
}

func removeDuplicateInt(intSlice []int) []int {
    allKeys := make(map[int]bool)
    list := []int{}
    for _, item := range intSlice {
        if _, value := allKeys[item]; !value {
            allKeys[item] = true
            list = append(list, item)
        }
    }
    return list
}

func verifyAllFromDrive() {
	start := time.Now()
	t()
	fmt.Println(time.Since(start))
}

func allFalseAttestations() {
	items, _ := ioutil.ReadDir("verificationResult")
	c:=0
	f, _ := os.Create("allFalse.txt")
    defer f.Close()

	for _, item := range items {
		fileLoc := "verificationResult/" + item.Name()
		readFile, err := os.Open(fileLoc)
  
    	if err != nil {
        	fmt.Println(err)
   	 	}
    	fileScanner := bufio.NewScanner(readFile)
 
    	fileScanner.Split(bufio.ScanLines)
  
    	for fileScanner.Scan() {
			c++
    	    // fmt.Println(fileScanner.Text())
			f.WriteString(fileScanner.Text())
			f.WriteString("\n")
    	}
  
    	readFile.Close()
		
	}
	fmt.Println(c)
}

func fetchepochs(interestedBlock int) {
	start := time.Now()
	blocks := []uint{}
	startBlock := (interestedBlock / 32) * 32
	for block := startBlock; block < startBlock + 32; block++{
		blocks = append(blocks, uint(block))
	}
	batchWriteBlockInfo("epochs/", blocks)
	fmt.Println(time.Since(start))

}

type Schedule struct {
	Data []struct {
		Index      string   `json:"index"`
		Slot       string   `json:"slot"`
		Validators []string `json:"validators"`
	} `json:"data"`
	ExecutionOptimistic bool `json:"execution_optimistic"`
}

func unvotedValidators(interestedBlock int) []int {
	// epoch's blocks under epochs/, committee schedule under schedule/
	file, _ := ioutil.ReadFile(fmt.Sprintf("schedule/%d.json", interestedBlock))
	var schedule Schedule
	_  = json.Unmarshal([]byte(file), &schedule)
	allValidators := map[int]bool{}
	for _, val := range schedule.Data {
		for _, validator := range val.Validators{
			idx, _ := strconv.Atoi(validator)
			if _, exist := allValidators[idx]; !exist{
				allValidators[idx] = true
			}
		}
	}
	// based on block_slot search the schedule
	// unique validators in that epoch
	votedValidators := map[int]bool{}
	startBlock := (interestedBlock / 32) * 32
	for block := startBlock; block < startBlock + 32; block++{
		atts := readBlockInfo("epochs/", uint(block))
		for _, val := range atts.Data {
			for _, idx := range val.Validators {
				if idx == 21955 {
					fmt.Println(val)
					os.Exit(0)
				}
				if _, exist := votedValidators[idx]; !exist{
					votedValidators[idx]=true
				}
			}
		}
	}

	unvotedValidators := []int{}
	for k := range allValidators {
		if _, voted := votedValidators[k]; !voted {
			unvotedValidators = append(unvotedValidators, k)
		}
	}

	fmt.Println(len(allValidators), len(votedValidators))
	fmt.Println(len(unvotedValidators))
	fmt.Println(contains(unvotedValidators, 56119))
	return unvotedValidators

	// search all voted validators in that epoch by traverse files epoch/
	

}

func smartSearchPubkeys(interestedBlock int) {
	searchSpace := unvotedValidators(interestedBlock)

	// traverse all false att, correct each by brute force search space
	readFile, _ := os.Open("allFalse.txt")
	fileScanner := bufio.NewScanner(readFile)
 
    fileScanner.Split(bufio.ScanLines)

	f, _ := os.Create(fmt.Sprintf("correction/%d.txt", interestedBlock))
    defer f.Close()
  
	for fileScanner.Scan() {
		fa := fileScanner.Text()
		row := strings.Split(fa, ",")
		blockslot, _:=strconv.ParseUint(row[4], 10, 64)
		if blockslot != uint64(interestedBlock)  {continue}

		bbr := row[1]
		sig := row[6]
		slot, _ := strconv.ParseUint(row[7], 10, 64)
		
		cidx, _ := strconv.ParseUint(row[5], 10, 64)
		sourceEpoch, _ := strconv.ParseUint(row[8], 10, 64)
		sourceRoot := row[9]
		targetEpoch, _ := strconv.ParseUint(row[10], 10, 64)
		targetRoot := row[11]
		if row[12][0]=='"' {
			row[12] = strings.Trim(row[12], "\"\"")
		}
		validators := strtouints(strings.Trim(row[12], "\\[\\]"))
		// fmt.Println(validators)

		// get data root
		signing_root := getSigningRoot2(bbr[2:], sig[2:], uint(slot), uint(cidx), uint(sourceEpoch), uint(targetEpoch), sourceRoot[2:], targetRoot[2:])
		// fmt.Println(signing_root)
		// get sig to verify
		sig = sig[2:]


		if len(validators) == 1 {
			// searchSinglePubKey(validators[0], interestedBlock)
			for _, valIdx := range searchSpace{
					pubkey := allValidators[valIdx]
					var pks []string
					pks = append(pks, pubkey[2:])
					r := aggregateVerify(signing_root[:], pks, sig)
					if r {
						fmt.Println(pubkey)
						f.WriteString(fmt.Sprintf("%s, %d, %s", sig, valIdx, pubkey))
						
						
						
					}
			
			}
		}
	}
  
    readFile.Close()

	
	
}

func bruteforceSearch() {
	readFile, _ := os.Open("allFalse.txt")
	fileScanner := bufio.NewScanner(readFile)
 
    fileScanner.Split(bufio.ScanLines)
	
	f, _ := os.Create(fmt.Sprintf("correction/all%s.txt", time.Now().String()))
    defer f.Close()

	c := 0
  
	for fileScanner.Scan() {
		fa := fileScanner.Text()
		i := strings.Index(fa, "\"")
		row := strings.Split(fa, ",")

		var validators []int
		if i > -1 {
			validatorsstr := fa[i+1:len(fa)-1]
			validators = strtouints(strings.Trim(validatorsstr, "\\[\\]"))
		}else{
			validators = strtouints(strings.Trim(row[12], "\\[\\]"))
		}
		bbr := row[1]
		sig := row[6]
		slot, _ := strconv.ParseUint(row[7], 10, 64)
		
		cidx, _ := strconv.ParseUint(row[5], 10, 64)
		sourceEpoch, _ := strconv.ParseUint(row[8], 10, 64)
		sourceRoot := row[9]
		targetEpoch, _ := strconv.ParseUint(row[10], 10, 64)
		targetRoot := row[11]
		
		// get data root
		signing_root := getSigningRoot2(bbr[2:], sig[2:], uint(slot), uint(cidx), uint(sourceEpoch), uint(targetEpoch), sourceRoot[2:], targetRoot[2:])
		// fmt.Println(signing_root)
		// get sig to verify
		sig = sig[2:]
		// only search for 1-val case
		if len(validators)==1{
			c++
			fmt.Println(fmt.Sprintf("search for validator %d", validators[0]))
			found := false
			var wg sync.WaitGroup
			wg.Add(1)
			for idx, pubkey := range allValidators{
				go func(valIdx int, pubkey string) {
					if found { return }
					var pks []string
					pks = append(pks, pubkey[2:])
					r := aggregateVerify(signing_root[:], pks, sig)
					if r {
						f.WriteString(fmt.Sprintf("%s, %d, %s\n", sig, valIdx, pubkey))
						fmt.Println(sig, valIdx, pubkey)
						found = true
						wg.Done()
					}
				}(idx, pubkey)
				

			}
			wg.Wait()
			if !found {
				fmt.Println(validators)
			}
		
		}
		


	}
	readFile.Close()
	fmt.Println(c)
}

// 4219 608065 included_in: 608067 
// 56119 608090
// 0x958391837758f8275e71bf34405d27a509ff1b7de4e7a53d87aa89dbb6800e0f100f57e9fd1a1c1b7f908c3860dfddb4
//25359  988961 included in: 988965
// 99842 988973
//0x857f7ca393da6f6fd816ef37b5cc7f3b33bdf23421625de8e5922399390af1de3596da010ea047cb452ee6eb766005cd
//42021 918914 918922
//98751 918940
// 0xb24928375d7ebb58e50544dc569f0a9e4aa67346ea3d7efa3d93995bc1e11c9ad656410e4d634c60a04e7197b064958d
//56833 918914 918922
// 98778 918925
// 0x8ef8a6aa04403f7a25ad8bbb0845c183be8bd83f9680bed6df396231ee94a2248de1af367a67e16683e69d82e63a8818
//57356  918914 918922
// 75274 918930
// 0x973ea7aa4fd07db36c3be5a075e81fde16172ceb8a207f65812eb08601b78f6bc9756a7af00275a109db02f2197efc4c

func main() {
	bls.Init(bls.BLS12_381)
	bls.SetETHmode(bls.EthModeDraft07)
	
	allValidators = getValidatorMap3()
	c = map[string]bool{}
	// mp = make(map[string]bool)

	// Create the root command
	rootCmd := &cobra.Command{
		Use: "ss",
	}

	// Define a flag for the verbosity level
	// verbosity := rootCmd.Flags().Int("verbosity", 0, "Verbosity level")

	// Define a command for printing the command line arguments
	argsCmd := &cobra.Command{
		Use: "args",
		Run: func(cmd *cobra.Command, args []string) {
			// Print the command line arguments
			fmt.Println("Arguments:")
			for i, arg := range args {
				fmt.Printf("  %d: %s\n", i, arg)
			}
		},
	}


	var blockId uint64
	verifyAllAttestationInBlockCmd := &cobra.Command {
		Use: "verifyAll --blockId=<blockslot>",
		Short: "verify all attestations in a specified block",
		Long: "verifyAllAttestationInBlock [blockid] if the block doesn't exist locally, fetch the block from beaconcha.in under test/ and verify",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println(verifyAllAttestationInBlock(int(blockId)))
		},
	}
	verifyAllAttestationInBlockCmd.Flags().Uint64Var(&blockId, "blockId", 0, "Required argument")
	verifyAllAttestationInBlockCmd.MarkFlagRequired("blockId")

	// Note currently only suport file in blockinfo folder, change to fetch later
	var validatorIdx uint64
	verifyAttestationByValidatorAndBlockCmd := &cobra.Command {
		Use: "verify --valIdx=<validatorIdx> --blockId=<blockslot>",
		Short: "verify attestations that contains validatorIdx in a specified block",
		Long: "verfiyAttestationByValidatorAndBlock [blockid] verify att that involves [valIdx]",
		Run: func(cmd *cobra.Command, args []string) {
			fmt.Println(verfiyAttestationByValidatorAndBlock(int(validatorIdx), int(blockId)))
		},
	}
	verifyAttestationByValidatorAndBlockCmd.Flags().Uint64Var(&blockId, "blockId", 0, "Required argument")
	verifyAttestationByValidatorAndBlockCmd.Flags().Uint64Var(&validatorIdx, "valIdx", 0, "Required argument")
	verifyAttestationByValidatorAndBlockCmd.MarkFlagRequired("blockId")
	verifyAttestationByValidatorAndBlockCmd.MarkFlagRequired("valIdx")

	var typ string
	checkCmd := &cobra.Command {
		Use: "check --type=double|surround",
		Short: "check for all interested attestations in double / surround vote detected from beaconcha.in",
		Long: "check for interested blocks in potential double vote / surround vote detected from beaconcha.in",
		Run: func(cmd *cobra.Command, args []string) {
			switch typ {
			case "double":
				checkDoubleVoteWithLocalData()
			case "surround":
				checkSurroundVoteWithLocalData()
			case "both":
				checkDoubleVoteWithLocalData()
				checkSurroundVoteWithLocalData()
			}
		},
	}
	checkCmd.Flags().StringVar(&typ, "type", "", "Required argument")
	checkCmd.MarkFlagRequired("typ")

	searchCmd := &cobra.Command {
		Use: "search --valIdx=<validatorIdx> --blockId=<blockId>",
		Short: "brute-force search for correct signer for sinlge validator case",
		Long: "brute-force search for correct signer for sinlge validator case",
		Run: func(cmd *cobra.Command, args []string) {
			idx, pubkey := searchSinglePubKey(int(validatorIdx), int(blockId))
			fmt.Println(idx, pubkey)
		},
	}
	searchCmd.Flags().Uint64Var(&blockId, "blockId", 0, "Required argument")
	searchCmd.Flags().Uint64Var(&validatorIdx, "valIdx", 0, "Required argument")
	searchCmd.MarkFlagRequired("blockId")
	searchCmd.MarkFlagRequired("valIdx")

	verifyAllCmd := &cobra.Command {
		Use: "verifyDrive",
		Short: "fetch from google drive and verify all atts for all blocks, output failed verification to verificationResult/",
		Long: "fetch from google drive and verify all atts",
		Run: func(cmd *cobra.Command, args []string) {
			verifyAllFromDrive()
		},
	}

	allFalseAttestationCmd := &cobra.Command {
		Use: "allFalse",
		Short: "fetch from google drive and verify all atts for all blocks, output failed verification to verificationResult/",
		Long: "fetch from google drive and verify all atts",
		Run: func(cmd *cobra.Command, args []string) {
			allFalseAttestations()
		},
	}

	fetchEpochByInterestedBlockCmd := &cobra.Command {
		Use: "fetch epoch for interested block",
		Short: "fetch epoch for interested block under epochs/",
		Long: "fetch epoch for interested block under epochs/",
		Run: func(cmd *cobra.Command, args []string) {
			fetchepochs(608067)
		},
	}

	unvotedValidatorsCmd := &cobra.Command {
		Use: "unvote validators in epoch defined by interested block",
		Short: "unvote validators in epoch defined by interested block",
		Long: "unvote validators in epoch defined by interested block",
		Run: func(cmd *cobra.Command, args []string) {
			unvotedValidators(608067)
		},
	}
	smartSearchCmd := &cobra.Command {
		Use: "ss validators in epoch defined by interested block",
		Short: "ss validators in epoch defined by interested block",
		Long: "ss validators in epoch defined by interested block",
		Run: func(cmd *cobra.Command, args []string) {
			smartSearchPubkeys(608067)
		},
	}
	signingRootCmd := &cobra.Command {
		Use: "sr validators in epoch defined by interested block",
		Short: "sr validators in epoch defined by interested block",
		Long: "sr validators in epoch defined by interested block",
		Run: func(cmd *cobra.Command, args []string) {
			getSigningRoot()
		},
	}
	bfPubkeyCmd := &cobra.Command {
		Use: "bf validators in epoch defined by interested block",
		Short: "bf validators in epoch defined by interested block",
		Long: "bf validators in epoch defined by interested block",
		Run: func(cmd *cobra.Command, args []string) {
			start := time.Now()
			bruteforceSearch()
			fmt.Println(time.Since(start))

		},
	}
	

	rootCmd.AddCommand(argsCmd)
	rootCmd.AddCommand(verifyAllAttestationInBlockCmd)
	rootCmd.AddCommand(verifyAttestationByValidatorAndBlockCmd)
	rootCmd.AddCommand(checkCmd)
	rootCmd.AddCommand(searchCmd)
	rootCmd.AddCommand(verifyAllCmd)
	rootCmd.AddCommand(allFalseAttestationCmd)
	rootCmd.AddCommand(fetchEpochByInterestedBlockCmd)
	rootCmd.AddCommand(unvotedValidatorsCmd)
	rootCmd.AddCommand(smartSearchCmd)
	rootCmd.AddCommand(signingRootCmd)
	rootCmd.AddCommand(bfPubkeyCmd)


	


	// Parse the command line flags and arguments
	rootCmd.Execute()

	


	
	
	// checkDoubleVoteWithLocalData()
	// a := []int{1041108, 1041109, 1041117}
	// for _, v := range a{
	// 	fmt.Println(verfiyAttestationByValidatorAndBlock(33096, v))
		
	// }
	// verfiyAttestationByValidatorAndBlock()
	// verifyAllAttestationInBlock(3)
	
	
	

	// searchSinglePubKey(88475, 608067)
	// for i := 608064; i<= 608086; i++{
	// 	if !contains(allBlocks, i){
	// 		fmt.Println(i)
	// 		verifyAllAttestationInBlock(i)
	// 	}
		
	// }
	// // verfiyAttestationByValidatorAndBlock(4219, 608067)
	// checkSurroundVoteWithLocalData()
	// file, _ := json.MarshalIndent(mp, "", " ")
	// _ = ioutil.WriteFile("total_slot:committeeIdx.json", file, 0644)
	// r := verfiyAttestationByValidatorAndBlock(4219, 608067)
	// fmt.Println(r)
	
	// for i := 608064; i <= 608095; i++{
	// 	attestations := readBlockInfo("epoch/", uint(i))
	// 	for _, attestation := range(attestations.Data){
	// 		// fmt.Println(attestation.Committeeindex==11)
	// 		if contains(attestation.Validators, 4219){
	// 			fmt.Println(attestation)
	// 		}
	// 	}
	// }

	// getValidatorMap2()
	
}