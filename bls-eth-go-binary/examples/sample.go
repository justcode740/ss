package main

import (
	"encoding/hex"
	"fmt"
	"github.com/herumi/bls-eth-go-binary/bls"
)

func sample1() {
	fmt.Printf("sample1\n")
	var sec bls.SecretKey
	sec.SetByCSPRNG()
	msg := []byte("abc")
	pub := sec.GetPublicKey()
	sig := sec.SignByte(msg)
	fmt.Printf("verify=%v\n", sig.VerifyByte(pub, msg))
}

func sample2() {
	fmt.Printf("sample2\n")
	var sec bls.SecretKey
	sec.SetByCSPRNG()
	fmt.Printf("sec:%s\n", sec.SerializeToHexStr())
	pub := sec.GetPublicKey()
	fmt.Printf("1.pub:%s\n", pub.SerializeToHexStr())
	fmt.Printf("1.pub x=%x\n", pub)
	var P *bls.G1 = bls.CastFromPublicKey(pub)
	bls.G1Normalize(P, P)
	fmt.Printf("2.pub:%s\n", pub.SerializeToHexStr())
	fmt.Printf("2.pub x=%x\n", pub)
	fmt.Printf("P.X=%x\n", P.X.Serialize())
	fmt.Printf("P.Y=%x\n", P.Y.Serialize())
	fmt.Printf("P.Z=%x\n", P.Z.Serialize())
}

func sample3() {
	fmt.Printf("sample3\n")
	var sec bls.SecretKey
	b := make([]byte, 64)
	for i := 0; i < len(b); i++ {
		b[i] = 0xff
	}
	err := sec.SetLittleEndianMod(b)
	if err != nil {
		fmt.Printf("err")
		return
	}
	fmt.Printf("sec=%x\n", sec.Serialize())
}

func sample4() {
	fmt.Printf("sample4\n")
	var sec bls.SecretKey
	secByte, _ := hex.DecodeString("4aac41b5cb665b93e031faa751944b1f14d77cb17322403cba8df1d6e4541a4d")
	sec.Deserialize(secByte)
	msg := []byte("message to be signed.")
	fmt.Printf("sec:%x\n", sec.Serialize())
	pub := sec.GetPublicKey()
	fmt.Printf("pub:%x\n", pub.Serialize())
	sig := sec.SignByte(msg)
	fmt.Printf("sig:%x\n", sig.Serialize())
}

// this function return true if sigToVerify is aggregated signature generated by hexstring pk each independently sign the same underlying msg, otherwise return false
func aggregateVerify(msg string, rawPks []string, sigToVerify string) bool {
	var sig bls.Sign
	err := sig.DeserializeHexStr(sigToVerify)
	if err != nil {
		error.Error(err)
	}
	msgByte, _ := hex.DecodeString(msg)
	var pks []bls.PublicKey
	for _, rawPk := range rawPks {
		pk := &bls.PublicKey{}
		pkByte, _ := hex.DecodeString(rawPk)
		pk.Deserialize(pkByte)
		pks = append(pks, *pk)
	}
	return sig.FastAggregateVerify(pks, msgByte)
}

func main() {
	bls.Init(bls.BLS12_381)
	bls.SetETHmode(bls.EthModeDraft07)
	data_root := "0x0d21b00f8daaa6a73e0d4a7149ca545612f287de6140f42d3f8d39d042d8c14f"
	pks := []string{
		"0x80468c2579b577e50b1e69755f06e72ebf6ae9caaed311882236f843567f07edfead2fa0f448861b09fe7685910bc241",
		"0x9131c281f29c3abf34bdcd3a344bb22fa5b07291fbae97ba189be9242e1fdb0474a2ed17a98a87fecd4427714a53a8da",
		"0xa6eb4ebdf9b217e2db544dfa205a90ab27b71269149368854ba61d7c52e39fe3d9c47529468fa1c00d8d85b10057df0a",
	}
	sig := "0xab417ccd597c9c1ff4cb58ea74bc89a59592f17d41449a131aa1484ac5a8a1e8e30224c7ef63da7aa33897b9767410df0ef547ae4b469748b45301eddecd86ad6e4b71287415e5c04ef08feb0a6c5b6b40e4bd7c132c73aa1d7bb8223a23c81f"
	fmt.Println(aggregateVerify(data_root, pks, sig))
}